
        recursive Subroutine easyO_{{ struct_name }}_scalar(fname, vname, data)
            !!! #####################################
            ! This Subroutine aims to write a scalar int4 variable into a netcdf dataset
            !!! #####################################
            implicit none

            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
            type({{ struct_name }}),intent(in) :: data
            character(*),intent(in) :: fname, vname
            
            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
            
            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
            call easyO(fname, vname, 1)

            {{ calls_from_fctt('') }}
            ! call easyO(fname, trim(vname)//'%is1', data%is1)
            ! call easyO(fname, trim(vname)//'%ia1', data%ia1)
            ! call easyOA(fname, trim(vname)//'%iaa1', data%iaa1)
            
        End Subroutine easyO_{{ struct_name }}_scalar

        recursive Subroutine easyI_{{ struct_name }}_scalar(fname, vname, data)
            !!! #####################################
            ! This Subroutine aims to write a scalar int4 variable into a netcdf dataset
            !!! #####################################
            implicit none

            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
            type({{ struct_name }}),intent(inout) :: data
            character(*),intent(in) :: fname, vname
            
            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
            
            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
            if (.not. enc_var_exist(fname, vname)) return

            {{ calls_from_fctt('', 'I') }}
            ! call easyO(fname, trim(vname)//'%is1', data%is1)
            ! call easyO(fname, trim(vname)//'%ia1', data%ia1)
            ! call easyOA(fname, trim(vname)//'%iaa1', data%iaa1)
            
        End Subroutine easyI_{{ struct_name }}_scalar

        recursive Subroutine easyOA_{{ struct_name }}_scalar(fname, vname, data)
            implicit none
            ! ............................................. Arguments
            type({{ struct_name }}), allocatable, intent(in) :: data
            character(*),intent(in) :: fname, vname

            ! ............................................. main body
            if (allocated(data)) then
                call easyO_{{ struct_name }}_scalar(fname, vname, data)
            end if

        End Subroutine

        recursive Subroutine easyIA_{{ struct_name }}_scalar(fname, vname, data)
            implicit none
            ! ............................................. Arguments
            type({{ struct_name }}), allocatable, intent(inout) :: data
            character(*),intent(in) :: fname, vname


            if (.not. enc_var_exist(fname, vname)) return

            if (.not. allocated(data)) then
                allocate(data)
            end if
            ! ............................................. main body
            
            call easyI_{{ struct_name }}_scalar(fname, vname, data)

        End Subroutine

        recursive Subroutine easyOP_{{ struct_name }}_scalar(fname, vname, data)
            implicit none
            ! ............................................. Arguments
            type({{ struct_name }}), pointer, intent(in) :: data
            character(*),intent(in) :: fname, vname

            ! ............................................. main body
            if (associated(data)) then
                call easyO_{{ struct_name }}_scalar(fname, vname, data)
            end if

        End Subroutine

        recursive Subroutine easyIP_{{ struct_name }}_scalar(fname, vname, data)
            implicit none
            ! ............................................. Arguments
            type({{ struct_name }}), pointer, intent(inout) :: data
            character(*),intent(in) :: fname, vname
            
            if (.not. enc_var_exist(fname, vname)) return

            if (.not. associated(data)) then
                allocate(data)
            end if
            ! ............................................. main body
            call easyI_{{ struct_name }}_scalar(fname, vname, data)

        End Subroutine

        !#jj2 for nd in range(1, N+1):
        !#jj2 set nColons_bracket = get_rank_from_nd(nd)
        recursive Subroutine easyO_{{ struct_name }}_{{ nd }}d(fname, vname, data)
            !!! #####################################
            ! This Subroutine aims to write a scalar int4 variable into a netcdf dataset
            !!! #####################################
            implicit none

            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
            type({{ struct_name }}),intent(in) :: data{{ nColons_bracket }}
            character(*),intent(in) :: fname, vname
            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
            integer :: i, j, k, l, m, n, s

            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
            call easyO(fname, vname, 1)

            call easyO(fname, trim(vname)//'.shape', shape(data))
            !#jj2 if nd == 1:
            !#jj2 set index = "(i)"
            do i = 1, size(data)
            !#jj2 elif nd == 2:
            !#jj2 set index = "(i,j)"
            do i = 1, size(data(:,1))
            do j = 1, size(data(1,:))
            !#jj2 elif nd == 3:
            !#jj2 set index = "(i,j,k)"
            do i = 1, size(data(:,1,1))
            do j = 1, size(data(1,:,1))
            do k = 1, size(data(1,1,:))
            !#jj2 elif nd == 4:
            !#jj2 set index = "(i,j,k,l)"
            do i = 1, size(data(:,1,1,1))
            do j = 1, size(data(1,:,1,1))
            do k = 1, size(data(1,1,:,1))
            do l = 1, size(data(1,1,1,:))
            !#jj2 elif nd == 5:
            !#jj2 set index = "(i,j,k,l,m)"
            do i = 1, size(data(:,1,1,1,1))
            do j = 1, size(data(1,:,1,1,1))
            do k = 1, size(data(1,1,:,1,1))
            do l = 1, size(data(1,1,1,:,1))
            do m = 1, size(data(1,1,1,1,:))
            !#jj2 elif nd == 6:
            !#jj2 set index = "(i,j,k,l,m,n)"
            do i = 1, size(data(:,1,1,1,1,1))
            do j = 1, size(data(1,:,1,1,1,1))
            do k = 1, size(data(1,1,:,1,1,1))
            do l = 1, size(data(1,1,1,:,1,1))
            do m = 1, size(data(1,1,1,1,:,1))
            do n = 1, size(data(1,1,1,1,1,:))
            !#jj2 elif nd == 7:
            !#jj2 set index = "(i,j,k,l,m,n,s)"
            do i = 1, size(data(:,1,1,1,1,1,1))
            do j = 1, size(data(1,:,1,1,1,1,1))
            do k = 1, size(data(1,1,:,1,1,1,1))
            do l = 1, size(data(1,1,1,:,1,1,1))
            do m = 1, size(data(1,1,1,1,:,1,1))
            do n = 1, size(data(1,1,1,1,1,:,1))
            do s = 1, size(data(1,1,1,1,1,1,:))
            !#jj2 endif
                {{ calls_from_fctt(index) }}
                ! call easyO(fname, trim(vname)//'('//  //')%is1', data(i)%is1, [size(data)], [i])
                ! call easyO(fname, trim(vname)//'('//  //')%ia1', data(i)%ia1, [size(data), size(data(i)%ia1)], [i, 1], [1, size(data(i)%ia1)])
                ! call easyOA(fname, trim(vname)//'('// //')%iaa1', data(i)%iaa1, [size(data), size(data(i)%ia1)], [i, 1], [1, size(data(i)%ia1)])
            !#jj2 for i in range(1, nd+1):
            end do
            !#jj2 endfor

        End Subroutine easyO_{{ struct_name }}_{{ nd }}d

        recursive Subroutine easyI_{{ struct_name }}_{{ nd }}d(fname, vname, data)
            !!! #####################################
            ! This Subroutine aims to write a scalar int4 variable into a netcdf dataset
            !!! #####################################
            implicit none

            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
            type({{ struct_name }}),intent(inout) :: data{{ nColons_bracket }}
            character(*),intent(in) :: fname, vname
            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
            integer :: i, j, k, l, m, n, s

            ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
            if (.not. enc_var_exist(fname, vname)) return

            !#jj2 if nd == 1:
            !#jj2 set index = "(i)"
            do i = 1, size(data)
            !#jj2 elif nd == 2:
            !#jj2 set index = "(i,j)"
            do i = 1, size(data(:,1))
            do j = 1, size(data(1,:))
            !#jj2 elif nd == 3:
            !#jj2 set index = "(i,j,k)"
            do i = 1, size(data(:,1,1))
            do j = 1, size(data(1,:,1))
            do k = 1, size(data(1,1,:))
            !#jj2 elif nd == 4:
            !#jj2 set index = "(i,j,k,l)"
            do i = 1, size(data(:,1,1,1))
            do j = 1, size(data(1,:,1,1))
            do k = 1, size(data(1,1,:,1))
            do l = 1, size(data(1,1,1,:))
            !#jj2 elif nd == 5:
            !#jj2 set index = "(i,j,k,l,m)"
            do i = 1, size(data(:,1,1,1,1))
            do j = 1, size(data(1,:,1,1,1))
            do k = 1, size(data(1,1,:,1,1))
            do l = 1, size(data(1,1,1,:,1))
            do m = 1, size(data(1,1,1,1,:))
            !#jj2 elif nd == 6:
            !#jj2 set index = "(i,j,k,l,m,n)"
            do i = 1, size(data(:,1,1,1,1,1))
            do j = 1, size(data(1,:,1,1,1,1))
            do k = 1, size(data(1,1,:,1,1,1))
            do l = 1, size(data(1,1,1,:,1,1))
            do m = 1, size(data(1,1,1,1,:,1))
            do n = 1, size(data(1,1,1,1,1,:))
            !#jj2 elif nd == 7:
            !#jj2 set index = "(i,j,k,l,m,n,s)"
            do i = 1, size(data(:,1,1,1,1,1,1))
            do j = 1, size(data(1,:,1,1,1,1,1))
            do k = 1, size(data(1,1,:,1,1,1,1))
            do l = 1, size(data(1,1,1,:,1,1,1))
            do m = 1, size(data(1,1,1,1,:,1,1))
            do n = 1, size(data(1,1,1,1,1,:,1))
            do s = 1, size(data(1,1,1,1,1,1,:))
            !#jj2 endif
                {{ calls_from_fctt(index, 'I') }}
                ! call easyO(fname, trim(vname)//'('//  //')%is1', data(i)%is1, [size(data)], [i])
                ! call easyO(fname, trim(vname)//'('//  //')%ia1', data(i)%ia1, [size(data), size(data(i)%ia1)], [i, 1], [1, size(data(i)%ia1)])
                ! call easyOA(fname, trim(vname)//'('// //')%iaa1', data(i)%iaa1, [size(data), size(data(i)%ia1)], [i, 1], [1, size(data(i)%ia1)])
            !#jj2 for i in range(1, nd+1):
            end do
            !#jj2 endfor

        End Subroutine easyI_{{ struct_name }}_{{ nd }}d

        recursive Subroutine easyOA_{{ struct_name }}_{{ nd }}d(fname, vname, data)
            implicit none
            ! ............................................. Arguments
            type({{ struct_name }}), allocatable, intent(in) :: data{{ nColons_bracket }}
            character(*),intent(in) :: fname, vname

            ! ............................................. main body
            if (allocated(data) .and. size(data) .gt. 0) then
                if (any(lbound(data) .ne. 1)) then
                    call easyO(fname, trim(vname)//'.bounds', reshape([lbound(data), ubound(data)], [2, size(shape(data))],order=[2,1]))
                end if
                call easyO_{{ struct_name }}_{{ nd }}d(fname, vname, data)
            end if

        End Subroutine

        recursive Subroutine easyOP_{{ struct_name }}_{{ nd }}d(fname, vname, data)
            implicit none
            ! ............................................. Arguments
            type({{ struct_name }}), pointer, intent(in) :: data{{ nColons_bracket }}
            character(*),intent(in) :: fname, vname

            ! ............................................. main body
            if (associated(data) .and. size(data) .gt. 0) then
                if (any(lbound(data) .ne. 1)) then
                    call easyO(fname, trim(vname)//'.bounds', reshape([lbound(data), ubound(data)], [2, size(shape(data))],order=[2,1]))
                end if
                call easyO_{{ struct_name }}_{{ nd }}d(fname, vname, data)
            end if

        End Subroutine



        recursive Subroutine easyIA_{{ struct_name }}_{{ nd }}d(fname, vname, data)
            implicit none
            ! ............................................. Arguments
            type({{ struct_name }}), allocatable, intent(inout) :: data{{ nColons_bracket }}
            character(*),intent(in) :: fname, vname

            ! ............................................. main body
            ! ========================= return if ncv doesn't exist in file
            if (.not. enc_var_exist(fname, trim(vname)//'.shape')) then
                return
            end if

            if (.not. allocated(data)) then
                call easyIA(fname, trim(vname)//'.shape', enc_iaaT2_1d)
                if (enc_var_exist(fname, trim(vname)//'.bounds')) then
                    allocate(enc_iaaT_2d(2, size(enc_iaaT2_1d)))
                    call easyI(fname, trim(vname) // '.bounds', enc_iaaT_2d)
                    allocate(data({{ render_arrayShape_from_enc_iaaT_2d(nd) }}))
                    deallocate(enc_iaaT_2d)
                else
                    allocate(data({{ render_arrayShape_from_shape('enc_iaaT2_1d', nd) }}))
                end if
                deallocate(enc_iaaT2_1d)
            end if
    
            call easyI_{{ struct_name }}_{{ nd }}d(fname, vname, data)

        End Subroutine

        recursive Subroutine easyIP_{{ struct_name }}_{{ nd }}d(fname, vname, data)
            implicit none
            ! ............................................. Arguments
            type({{ struct_name }}), pointer, intent(inout) :: data{{ nColons_bracket }}
            character(*),intent(in) :: fname, vname

            ! ............................................. main body
            ! ========================= return if ncv doesn't exist in file
            if (.not. enc_var_exist(fname, trim(vname)//'.shape')) then
                return
            end if

            if (.not. associated(data)) then
                call easyIA(fname, trim(vname)//'.shape', enc_iaaT2_1d)
                if (enc_var_exist(fname, trim(vname)//'.bounds')) then
                    allocate(enc_iaaT_2d(2, size(enc_iaaT2_1d)))
                    call easyI(fname, trim(vname) // '.bounds', enc_iaaT_2d)
                    allocate(data({{ render_arrayShape_from_enc_iaaT_2d(nd) }}))
                    deallocate(enc_iaaT_2d)
                else
                    allocate(data({{ render_arrayShape_from_shape('enc_iaaT2_1d', nd) }}))
                end if
                deallocate(enc_iaaT2_1d)
            end if
    
            call easyI_{{ struct_name }}_{{ nd }}d(fname, vname, data)

        End Subroutine

        !#jj2 endfor
