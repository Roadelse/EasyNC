

! *********************************************************
! easyIO for scalar generic numeric data type :
!   int4. int8, real4, real8
! *********************************************************
!#jj2 for type in ['int4', 'int8', 'real4', 'real8', 'string', 'logical', 'complex4', 'complex8']:
!#jj2 set ftype = ftypes[type]

Subroutine easyOA_{{ type }}_scalar(fname, vname, data)
    implicit none
    ! ............................................. Arguments
    {{ ftype }}, allocatable, intent(in) :: data
    character(*),intent(in) :: fname, vname

    ! ............................................. main body
    if (allocated(data)) then
        call easyO_{{ type }}_scalar(fname, vname, data)
    end if

End Subroutine

Subroutine easyIA_{{ type }}_scalar(fname, vname, data)
    implicit none
    ! ............................................. Arguments
    {{ ftype }}, allocatable, intent(inout) :: data
    character(*),intent(in) :: fname, vname

    ! ............................................. main body
    ! ~~~~~~~~~~~~~~ handle var-exist actions (not very strict, may need to check size or some what?)
    if (.not. enc_var_exist(fname, vname)) then
        if (enc_vea .eq. -1) then
            print *, 'Error in easyI with enc_vea = -1, variable does not exist: '//trim(vname)
            stop 1
        else
            return
        end if
    end if

    ! ~~~~~~~~~~~~~~~~~~ allocate and get it
    if (.not. allocated(data)) then
        allocate(data,  STAT=enc_i)
        call check_enc(enc_i, '[M::EasyNC/S::easyIA_{{ type }}_scalar] Error in allocate data for: '//trim(vname))
        if (enc_i .ne. 0) then
            print *, '[M::EasyNC/S::easyIA_{{ type }}_scalar] Error in allocate data for: '//trim(vname)
            stop 1
        end if
    end if
    call easyI_{{ type }}_scalar(fname, vname, data)

End Subroutine
!#jj2 endfor



! *********************************************************
! easyIO for n-dimensional generic numeric data type :
!   int4. int8, real4, real8
! *********************************************************


!#jj2 for nd in [1,2,3,4,5,6,7]
!#jj2 set nColons_bracket = get_rank_from_nd(nd)
!#jj2 for type in ['int4', 'int8', 'real4', 'real8', 'string', 'logical', 'complex4', 'complex8']:
!#jj2 if type == 'string' and nd == 7: 
!#jj2   continue
!#jj2 endif
!#jj2 set ftype = ftypes[type]
!#jj2 set nf90_type = nf90_types[type]
    Subroutine easyOA_{{ type }}_{{ nd }}d(fname, vname, data, shape_total, positioin, count_lens, dimnames)
        !!! #####################################
        ! This Subroutine wraps the easyO_* function except for ALLOCATABLE data
        !!! #####################################
        implicit none
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
        {{ ftype }},allocatable,intent(in) :: data{{ nColons_bracket }}
        character(*),intent(in) :: fname, vname
        integer, intent(in), optional :: shape_total(:)         ! total shape
        integer, intent(in), optional :: positioin(:)           ! `start` in netcdf
        integer, intent(in), optional :: count_lens(:)          ! `count` in netcdf
        character(*), intent(in), optional :: dimnames(:)       ! control dimnames_ for specific dimensions

        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Main body
        ! ============================= handle var-exist actions (not very strict, may need to check size or some what?)
        if (enc_var_exist(fname, vname)) then
            if (enc_vea .eq. 1) then
                return
            elseif (enc_vea .eq. -1) then
                print *, 'Error in easyO with enc_vea = -1, variable exist!'
                stop 1
            end if
        end if

        if (.not.allocated(data)) return
        if (size(data) .eq. 0) return

        if (any(lbound(data) .ne. 1)) then
            call easyO(fname, trim(vname)//'.bounds', reshape([lbound(data), ubound(data)], [2, size(shape(data))],order=[2,1]))
        end if
        if (present(shape_total)) then
            if (present(dimnames)) then
                call easyO_{{ type }}_{{ nd }}d(fname, vname, data, shape_total, positioin, count_lens, dimnames)
            else
                call easyO_{{ type }}_{{ nd }}d(fname, vname, data, shape_total, positioin, count_lens)
            end if
        else
            if (present(dimnames)) then
                call easyO_{{ type }}_{{ nd }}d(fname, vname, data, dimnames=dimnames)
            else
                call easyO_{{ type }}_{{ nd }}d(fname, vname, data)
            end if
        end if

    End Subroutine easyOA_{{ type }}_{{ nd }}d

    Subroutine easyIA_{{ type }}_{{ nd }}d(fname, vname, data, positioin, count_lens)
        !!! #####################################
        ! This Subroutine wraps the easyI_* function except for ALLOCATABLE data
        !!! #####################################
        implicit none
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
        {{ ftype }},allocatable,intent(inout) :: data{{ nColons_bracket }}
        character(*),intent(in) :: fname, vname
        integer, intent(in), optional :: positioin(:)         ! `start` in netcdf
        integer, intent(in), optional :: count_lens(:)       ! `count` in netcdf
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
        integer, allocatable :: shape_manual(:)
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Main body
        ! ========================= return if ncv doesn't exist in file
        ! ~~~~~~~~~~~~~~ handle var-exist actions (not very strict, may need to check size or some what?)
        if (.not. enc_var_exist(fname, vname)) then
            if (enc_vea .eq. -1) then
                print *, 'Error in easyI with enc_vea = -1, variable does not exist: '//trim(vname)
                stop 1
            else
                return
            end if
        end if
        
        if (.not. allocated(data)) then
            if (present(count_lens)) then
                call assert(any(count_lens .gt. 1), 'Error! count_lens should have at least 1 element beyond 1')
                call remove_val(count_lens, 1, shape_manual, -1)
                allocate(data({{ render_arrayShape_from_shape('shape_manual', nd) }}), STAT=enc_i)
                call check_enc(enc_i, '[M::EasyNC/S::easyIA_{{ type }}_{{ nd }}d] Error in allocate data (1st)  for: '//trim(vname))
                deallocate(shape_manual)
            else
                !#jj2 if type.startswith("complex"):
                call enc_get_dims(fname, trim(vname)//'.real', enc_iaaT_1d)
                !#jj2 else:
                call enc_get_dims(fname, vname, enc_iaaT_1d)
                !#jj2 endif
                if (enc_var_exist(fname, trim(vname)//'.bounds')) then
                    allocate(enc_iaaT_2d(2, size(enc_iaaT_1d)), STAT=enc_i)
                    call check_enc(enc_i, '[M::EasyNC/S::easyIA_{{ type }}_{{ nd }}d] Error in allocate enc_iaaT_2d for '//trim(vname))
                    call easyI(fname, trim(vname) // '.bounds', enc_iaaT_2d)
                    allocate(data({{ render_arrayShape_from_enc_iaaT_2d(nd) }}), STAT=enc_i)
                    call check_enc(enc_i, '[M::EasyNC/S::easyIA_{{ type }}_{{ nd }}d] Error in allocate data (2nd) for '//trim(vname))
                    deallocate(enc_iaaT_2d)
                else
                    allocate(data({{ render_arrayShape_from_shape('enc_iaaT_1d', nd) }}), STAT=enc_i)
                    call check_enc(enc_i, '[M::EasyNC/S::easyIA_{{ type }}_{{ nd }}d] Error in allocate data (3rd) for '//trim(vname))
                end if
                deallocate(enc_iaaT_1d)
            end if
        end if

        if (present(positioin)) then
            call easyI_{{ type }}_{{ nd }}d(fname, vname, data, positioin, count_lens)
        else
            call easyI_{{ type }}_{{ nd }}d(fname, vname, data)
        end if
    End Subroutine easyIA_{{ type }}_{{ nd }}d
!#jj2 endfor
!#jj2 endfor