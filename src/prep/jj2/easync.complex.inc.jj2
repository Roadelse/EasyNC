
Subroutine easyO_complex4_scalar(fname, vname, val, type_info)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
    Complex(kind=4),intent(in) :: val
    character(*),intent(in) :: fname, vname
    real(kind=4) :: val_re, val_im
    integer,intent(in),optional :: type_info(:, :)

    val_re = val%re
    val_im = val%im

    if (present(type_info)) then
      call easyO_real4_scalar(fname, trim(vname)//'.real', val_re, type_info)
      call easyO_real4_scalar(fname, trim(vname)//'.imag', val_im, type_info)
    else
      call easyO_real4_scalar(fname, trim(vname)//'.real', val_re)
      call easyO_real4_scalar(fname, trim(vname)//'.imag', val_im)
    end if

    return
end subroutine easyO_complex4_scalar

Subroutine easyI_complex4_scalar(fname, vname, val, type_info)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
    Complex(kind=4),intent(out) :: val
    character(*),intent(in) :: fname, vname
    real(kind=4) :: val_re, val_im
    integer,intent(in),optional :: type_info(:, :)

    val_re = val%re
    val_im = val%im

    if (present(type_info)) then
      call easyI_real4_scalar(fname, trim(vname)//'.real', val_re, type_info)
      call easyI_real4_scalar(fname, trim(vname)//'.imag', val_im, type_info)
    else
      call easyI_real4_scalar(fname, trim(vname)//'.real', val_re)
      call easyI_real4_scalar(fname, trim(vname)//'.imag', val_im)
    end if

    val%re = val_re
    val%im = val_im

    return
end subroutine easyI_complex4_scalar

Subroutine easyO_complex8_scalar(fname, vname, val, type_info)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  Complex(kind=8),intent(in) :: val
  character(*),intent(in) :: fname, vname
  real(kind=8) :: val_re, val_im
  integer,intent(in),optional :: type_info(:, :)

  val_re = val%re
  val_im = val%im

  if (present(type_info)) then
    call easyO_real8_scalar(fname, trim(vname)//'.real', val_re, type_info)
    call easyO_real8_scalar(fname, trim(vname)//'.imag', val_im, type_info)
  else
    call easyO_real8_scalar(fname, trim(vname)//'.real', val_re)
    call easyO_real8_scalar(fname, trim(vname)//'.imag', val_im)
  end if

  return
end subroutine easyO_complex8_scalar

Subroutine easyI_complex8_scalar(fname, vname, val, type_info)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  Complex(kind=8),intent(out) :: val
  character(*),intent(in) :: fname, vname
  real(kind=8) :: val_re, val_im
  integer,intent(in),optional :: type_info(:, :)

  val_re = val%re
  val_im = val%im

  if (present(type_info)) then
    call easyI_real8_scalar(fname, trim(vname)//'.real', val_re, type_info)
    call easyI_real8_scalar(fname, trim(vname)//'.imag', val_im, type_info)
  else
    call easyI_real8_scalar(fname, trim(vname)//'.real', val_re)
    call easyI_real8_scalar(fname, trim(vname)//'.imag', val_im)
  end if

  val%re = val_re
  val%im = val_im

  return
end subroutine easyI_complex8_scalar



!#jj2 for nd in [1,2,3,4,5,6,7]:
Subroutine easyO_complex4_{{ nd }}d(fname, vname, val, type_info, type_ele_alone)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  complex(kind=4),intent(in) :: val{{ get_rank_from_nd(nd) }}
  character(*),intent(in) :: fname, vname
  integer,intent(in),optional :: type_info(:, :)
  integer,intent(in),optional :: type_ele_alone

  real(kind=4) :: val_re{{ get_b_shape(nd) }}, val_im{{ get_b_shape(nd) }}

  val_re = val%re
  val_im = val%im

  if (present(type_info)) then
    if (present(type_ele_alone)) then
      call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info, type_ele_alone)
      call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_re, type_info, type_ele_alone)
    else
      call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info)
      call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im, type_info)
    end if
  else
    call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re)
    call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
  end if

  return
end subroutine easyO_complex4_{{ nd }}d

Subroutine easyOA_complex4_{{ nd }}d(fname, vname, val, type_info)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  complex(kind=4),allocatable,intent(in) :: val{{ get_rank_from_nd(nd) }}
  character(*),intent(in) :: fname, vname
  integer,intent(in),optional :: type_info(:, :)

  real(kind=4),allocatable :: val_im{{ get_rank_from_nd(nd) }}, val_re{{ get_rank_from_nd(nd) }}

  if (allocated(val) .and. size(val) .gt. 0) then
    allocate(val_re, source=real(val))
    allocate(val_im, source=aimag(val))

    if (any(lbound(val) .ne. 1)) call easyO(trim(fname), trim(vname)//'.bounds', reshape([lbound(val), ubound(val)], [2, size(shape(val))],order=[2,1]))
    if (present(type_info)) then
        call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info, 1)
        call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im, type_info, 1)
    else
      call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re)
      call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
    end if
    deallocate(val_re)
    deallocate(val_im)
  end if
  return
end subroutine easyOA_complex4_{{ nd }}d

Subroutine easyI_complex4_{{ nd }}d(fname, vname, val, type_info)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  complex(kind=4),intent(out) :: val{{ get_rank_from_nd(nd) }}
  character(*),intent(in) :: fname, vname
  integer,intent(in),optional :: type_info(:, :)

  real(kind=4) :: val_re{{ get_b_shape(nd) }}, val_im{{ get_b_shape(nd) }}


  if (present(type_info)) then
    call easyI_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info)
    call easyI_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im, type_info)
  else
    call easyI_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re)
    call easyI_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
  end if

  val%re = val_re
  val%im = val_im

  return
end subroutine easyI_complex4_{{ nd }}d

Subroutine easyIA_complex4_{{ nd }}d(fname, vname, val, type_info)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  complex(kind=4),allocatable,intent(inout) :: val{{ get_rank_from_nd(nd) }}
  character(*),intent(in) :: fname, vname
  integer,intent(in),optional :: type_info(:, :)

  real(kind=4),allocatable :: val_im{{ get_rank_from_nd(nd) }}, val_re{{ get_rank_from_nd(nd) }}


  if (.not. allocated(val)) then
    call getDims2_enc(fname, trim(vname)//'.real', dimsT_enc)
    if (hasVar(fname, trim(vname) // '.bounds') .eq. 1) then
      allocate(dimsT2_enc(2, size(dimsT_enc)))
      call easyI(fname, trim(vname) // '.bounds', dimsT2_enc)
      allocate(val({{ get_dimsT2_enc_arrayBound(nd) }}))
      allocate(val_re({{ get_dimsT2_enc_arrayBound(nd) }}))
      allocate(val_im({{ get_dimsT2_enc_arrayBound(nd) }}))
      deallocate(dimsT_enc); deallocate(dimsT2_enc)
    else
      allocate(val({{ get_dimsT_enc_arrayShape(nd) }}))
      allocate(val_re({{ get_dimsT_enc_arrayShape(nd) }}))
      allocate(val_im({{ get_dimsT_enc_arrayShape(nd) }}))
      deallocate(dimsT_enc)
    end if
  else
    allocate(val_re, source = real(val))
    allocate(val_im, source = aimag(val))
  end if

  if (present(type_info)) then
    call easyI_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info)
    call easyI_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im, type_info)
  else
    call easyI_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re)
    call easyI_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
  end if

  deallocate(val_re)
  deallocate(val_im)

  return
end subroutine easyIA_complex4_{{ nd }}d
!#jj2 endfor



!#jj2 for nd in [1,2,3,4,5,6,7]:
Subroutine easyO_complex8_{{ nd }}d(fname, vname, val, type_info, type_ele_alone)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  complex(kind=8),intent(in) :: val{{ get_rank_from_nd(nd) }}
  character(*),intent(in) :: fname, vname
  integer,intent(in),optional :: type_info(:, :)
  integer,intent(in),optional :: type_ele_alone

  real(kind=8) :: val_re{{ get_b_shape(nd) }}, val_im{{ get_b_shape(nd) }}

  val_re = val%re
  val_im = val%im

  if (present(type_info)) then
    if (present(type_ele_alone)) then
      call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info, type_ele_alone)
      call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_re, type_info, type_ele_alone)
    else
      call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info)
      call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im, type_info)
    end if
  else
    call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re)
    call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
  end if

  return
end subroutine easyO_complex8_{{ nd }}d

Subroutine easyOA_complex8_{{ nd }}d(fname, vname, val, type_info)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  complex(kind=8),allocatable,intent(in) :: val{{ get_rank_from_nd(nd) }}
  character(*),intent(in) :: fname, vname
  integer,intent(in),optional :: type_info(:, :)

  real(kind=8),allocatable :: val_im{{ get_rank_from_nd(nd) }}, val_re{{ get_rank_from_nd(nd) }}

  if (allocated(val) .and. size(val) .gt. 0) then
    allocate(val_re, source=real(val))
    allocate(val_im, source=aimag(val))

    if (any(lbound(val) .ne. 1)) call easyO(trim(fname), trim(vname)//'.bounds', reshape([lbound(val), ubound(val)], [2, size(shape(val))],order=[2,1]))
    if (present(type_info)) then
        call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info, 1)
        call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im, type_info, 1)
    else
      call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re)
      call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
    end if
    deallocate(val_im)
    deallocate(val_re)
  end if
  return
end subroutine easyOA_complex8_{{ nd }}d

Subroutine easyI_complex8_{{ nd }}d(fname, vname, val, type_info)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  complex(kind=8),intent(out) :: val{{ get_rank_from_nd(nd) }}
  character(*),intent(in) :: fname, vname
  integer,intent(in),optional :: type_info(:, :)

  real(kind=8) :: val_re{{get_b_shape(nd) }}, val_im{{get_b_shape(nd) }}


  if (present(type_info)) then
    call easyI_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info)
    call easyI_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im, type_info)
  else
    call easyI_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re)
    call easyI_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
  end if

  val%re = val_re
  val%im = val_im

  return
end subroutine easyI_complex8_{{ nd }}d

Subroutine easyIA_complex8_{{ nd }}d(fname, vname, val, type_info)
  ! almost Duplicated with easyO_int
  implicit none
  ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> header
  complex(kind=8),allocatable,intent(inout) :: val{{ get_rank_from_nd(nd) }}
  character(*),intent(in) :: fname, vname
  integer,intent(in),optional :: type_info(:, :)

  real(kind=8),allocatable :: val_im{{ get_rank_from_nd(nd) }}, val_re{{ get_rank_from_nd(nd) }}


  if (.not. allocated(val)) then
    call getDims2_enc(fname, trim(vname)//'.real', dimsT_enc)
    if (hasVar(fname, trim(vname) // '.bounds') .eq. 1) then
      allocate(dimsT2_enc(2, size(dimsT_enc)))
      call easyI(fname, trim(vname) // '.bounds', dimsT2_enc)
      allocate(val({{ get_dimsT2_enc_arrayBound(nd) }}))
      allocate(val_re({{ get_dimsT2_enc_arrayBound(nd) }}))
      allocate(val_im({{ get_dimsT2_enc_arrayBound(nd) }}))
      deallocate(dimsT_enc); deallocate(dimsT2_enc)
    else
      allocate(val({{ get_dimsT_enc_arrayShape(nd) }}))
      allocate(val_re({{ get_dimsT_enc_arrayShape(nd) }}))
      allocate(val_im({{ get_dimsT_enc_arrayShape(nd) }}))
      deallocate(dimsT_enc)
    end if
  else
    allocate(val_re, source=real(val))
    allocate(val_im, source=aimag(val))
  end if

  if (present(type_info)) then
    call easyI_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, type_info)
    call easyI_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im, type_info)
  else
    call easyI_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re)
    call easyI_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
  end if

  val%im = val_im
  val%re = val_re
  deallocate(val_im)
  deallocate(val_re)

  return
end subroutine easyIA_complex8_{{ nd }}d
!#jj2 endfor
