
Subroutine easyO_complex4_scalar(fname, vname, val, shape_total, position, dimnames)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
    Complex(kind=4),intent(in) :: val
    character(*),intent(in) :: fname, vname
    integer, intent(in), optional :: shape_total(:)         ! total shape
    integer, intent(in), optional :: position(:)            ! `start` in netcdf
    character(*), intent(in), optional :: dimnames(:)       ! control dimnames_ for specific dimensions

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
    real(kind=4) :: val_re, val_im

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
    ! ============================= handle var-exist actions (not very strict, may need to check size or some what?)
    if (enc_var_exist(fname, vname)) then
        if (enc_vea .eq. 1) then
            return
        elseif (enc_vea .eq. -1) then
            print *, 'Error in easyO with enc_vea = -1, variable exist!'
            stop 1
        end if
    end if

    val_re = real(val)
    val_im = aimag(val)

    call easyO(fname, vname, 1)

    if (present(shape_total)) then
        if (present(dimnames)) then
            call easyO_real4_scalar(fname, trim(vname)//'.real', val_re, shape_total, position, dimnames)
            call easyO_real4_scalar(fname, trim(vname)//'.imag', val_im, shape_total, position, dimnames)
        else
            call easyO_real4_scalar(fname, trim(vname)//'.real', val_re, shape_total, position)
            call easyO_real4_scalar(fname, trim(vname)//'.imag', val_im, shape_total, position)
        end if
    else
      call easyO_real4_scalar(fname, trim(vname)//'.real', val_re)
      call easyO_real4_scalar(fname, trim(vname)//'.imag', val_im)
    end if

    return
end subroutine easyO_complex4_scalar

Subroutine easyI_complex4_scalar(fname, vname, val, position)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
    Complex(kind=4),intent(out) :: val
    character(*),intent(in) :: fname, vname
    integer, intent(in), optional :: position(:)         ! `start` in netcdf

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> local variables
    real(kind=4) :: val_re, val_im

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
    val_re = real(val)
    val_im = aimag(val)

    if (.not. enc_var_exist(fname, vname)) then
        if (enc_vea .eq. -1) then
            print *, 'Error in easyI with enc_vea = -1, variable does not exist: '//trim(vname)
            stop 1
        else
            return
        end if
    end if

    if (present(position)) then
      call easyI_real4_scalar(fname, trim(vname)//'.real', val_re, position)
      call easyI_real4_scalar(fname, trim(vname)//'.imag', val_im, position)
    else
      call easyI_real4_scalar(fname, trim(vname)//'.real', val_re)
      call easyI_real4_scalar(fname, trim(vname)//'.imag', val_im)
    end if

    val = cmplx(val_re, val_im)

    return
end subroutine easyI_complex4_scalar

Subroutine easyO_complex8_scalar(fname, vname, val, shape_total, position, dimnames)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
    Complex(kind=8),intent(in) :: val
    character(*),intent(in) :: fname, vname
    integer, intent(in), optional :: shape_total(:)      ! total shape
    integer, intent(in), optional :: position(:)         ! `start` in netcdf
    character(*), intent(in), optional :: dimnames(:)       ! control dimnames_ for specific dimensions

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
    real(kind=8) :: val_re, val_im

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
    ! ============================= handle var-exist actions (not very strict, may need to check size or some what?)
    if (enc_var_exist(fname, vname)) then
        if (enc_vea .eq. 1) then
            return
        elseif (enc_vea .eq. -1) then
            print *, 'Error in easyO with enc_vea = -1, variable exist!'
            stop 1
        end if
    end if

    call easyO(fname, vname, 1)

    val_re = real(val)
    val_im = aimag(val)

    if (present(shape_total)) then
        if (present(dimnames)) then
            call easyO_real8_scalar(fname, trim(vname)//'.real', val_re, shape_total, position, dimnames)
            call easyO_real8_scalar(fname, trim(vname)//'.imag', val_im, shape_total, position, dimnames)
        else
            call easyO_real8_scalar(fname, trim(vname)//'.real', val_re, shape_total, position)
            call easyO_real8_scalar(fname, trim(vname)//'.imag', val_im, shape_total, position)
        end if
    else
        call easyO_real8_scalar(fname, trim(vname)//'.real', val_re)
        call easyO_real8_scalar(fname, trim(vname)//'.imag', val_im)
    end if

    return
end subroutine easyO_complex8_scalar

Subroutine easyI_complex8_scalar(fname, vname, val, position)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
    Complex(kind=8),intent(out) :: val
    character(*),intent(in) :: fname, vname
    integer, intent(in), optional :: position(:)         ! `start` in netcdf

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
    real(kind=8) :: val_re, val_im

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
    if (.not. enc_var_exist(fname, vname)) then
        if (enc_vea .eq. -1) then
            print *, 'Error in easyI with enc_vea = -1, variable does not exist: '//trim(vname)
            stop 1
        else
            return
        end if
    end if

    val_re = real(val)
    val_im = aimag(val)

    if (present(position)) then
        call easyI_real8_scalar(fname, trim(vname)//'.real', val_re, position)
        call easyI_real8_scalar(fname, trim(vname)//'.imag', val_im, position)
    else
        call easyI_real8_scalar(fname, trim(vname)//'.real', val_re)
        call easyI_real8_scalar(fname, trim(vname)//'.imag', val_im)
    end if

    val = cmplx(val_re, val_im, 8)

    return
end subroutine easyI_complex8_scalar



!#jj2 for nd in [1,2,3,4,5,6,7]:
Subroutine easyO_complex4_{{ nd }}d(fname, vname, val, shape_total, position, count_lens, dimnames)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
    complex(kind=4),intent(in) :: val{{ get_rank_from_nd(nd) }}
    character(*),intent(in) :: fname, vname
    integer, intent(in), optional :: shape_total(:)         ! total shape
    integer, intent(in), optional :: position(:)            ! `start` in netcdf
    integer, intent(in), optional :: count_lens(:)          ! `count` in netcdf
    character(*), intent(in), optional :: dimnames(:)       ! control dimnames_ for specific dimensions

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
    real(kind=4) ,allocatable :: val_re{{ get_rank_from_nd(nd) }}, val_im{{ get_rank_from_nd(nd) }}

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
    ! ============================= handle var-exist actions (not very strict, may need to check size or some what?)
    if (enc_var_exist(fname, vname)) then
        if (enc_vea .eq. 1) then
            return
        elseif (enc_vea .eq. -1) then
            print *, 'Error in easyO with enc_vea = -1, variable exist!'
            stop 1
        end if
    end if

    call easyO(fname, vname, 1)

    allocate(val_re{{ get_b_shape(nd) }})
    allocate(val_im{{ get_b_shape(nd) }})

    val_re = real(val)
    val_im = aimag(val)

    if (present(shape_total)) then
        if (present(dimnames)) then
            call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, shape_total, position, count_lens, dimnames)
            call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im, shape_total, position, count_lens, dimnames)
        else
            call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, shape_total, position, count_lens)
            call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im, shape_total, position, count_lens)
        end if       
    else
        if (present(dimnames)) then
            call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, dimnames=dimnames)
            call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im, dimnames=dimnames)
        else
            call easyO_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re)
            call easyO_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
        end if
    end if

    deallocate(val_re)
    deallocate(val_im)
    return
end subroutine easyO_complex4_{{ nd }}d

Subroutine easyI_complex4_{{ nd }}d(fname, vname, val, position, count_lens)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
    complex(kind=4),intent(out) :: val{{ get_rank_from_nd(nd) }}
    character(*),intent(in) :: fname, vname
    integer, intent(in), optional :: position(:)         ! `start` in netcdf
    integer, intent(in), optional :: count_lens(:)       ! `count` in netcdf

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
    real(kind=4) ,allocatable :: val_re{{ get_rank_from_nd(nd) }}, val_im{{ get_rank_from_nd(nd) }}

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
    if (.not. enc_var_exist(fname, vname)) then
        if (enc_vea .eq. -1) then
            print *, 'Error in easyI with enc_vea = -1, variable does not exist: '//trim(vname)
            stop 1
        else
            return
        end if
    end if

    allocate(val_re{{ get_b_shape(nd) }})
    allocate(val_im{{ get_b_shape(nd) }})

    if (present(count_lens)) then
        call easyI_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re, position, count_lens)
        call easyI_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im, position, count_lens)
    else
        call easyI_real4_{{ nd }}d(fname, trim(vname)//'.real', val_re)
        call easyI_real4_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
    end if

    val = cmplx(val_re, val_im)
    deallocate(val_re)
    deallocate(val_im)
    return
end subroutine easyI_complex4_{{ nd }}d

Subroutine easyO_complex8_{{ nd }}d(fname, vname, val, shape_total, position, count_lens, dimnames)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
    complex(kind=8),intent(in) :: val{{ get_rank_from_nd(nd) }}
    character(*),intent(in) :: fname, vname
    integer, intent(in), optional :: shape_total(:)         ! total shape
    integer, intent(in), optional :: position(:)            ! `start` in netcdf
    integer, intent(in), optional :: count_lens(:)          ! `count` in netcdf
    character(*), intent(in), optional :: dimnames(:)       ! control dimnames_ for specific dimensions

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
    real(kind=8) ,allocatable :: val_re{{ get_rank_from_nd(nd) }}, val_im{{ get_rank_from_nd(nd) }}

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
    ! ============================= handle var-exist actions (not very strict, may need to check size or some what?)
    if (enc_var_exist(fname, vname)) then
        if (enc_vea .eq. 1) then
            return
        elseif (enc_vea .eq. -1) then
            print *, 'Error in easyO with enc_vea = -1, variable exist!'
            stop 1
        end if
    end if

    call easyO(fname, vname, 1)

    allocate(val_re{{ get_b_shape(nd) }})
    allocate(val_im{{ get_b_shape(nd) }})

    val_re = real(val)
    val_im = aimag(val)

    if (present(shape_total)) then
        if (present(dimnames)) then
            call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, shape_total, position, count_lens, dimnames)
            call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im, shape_total, position, count_lens, dimnames)
        else
            call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, shape_total, position, count_lens)
            call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im, shape_total, position, count_lens)
        end if       
    else
        if (present(dimnames)) then
            call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, dimnames=dimnames)
            call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im, dimnames=dimnames)
        else
            call easyO_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re)
            call easyO_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
        end if
    end if

    deallocate(val_re)
    deallocate(val_im)
    return
end subroutine easyO_complex8_{{ nd }}d

Subroutine easyI_complex8_{{ nd }}d(fname, vname, val, position, count_lens)
    ! almost Duplicated with easyO_int
    implicit none
    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
    complex(kind=8),intent(out) :: val{{ get_rank_from_nd(nd) }}
    character(*),intent(in) :: fname, vname
    integer, intent(in), optional :: position(:)         ! `start` in netcdf
    integer, intent(in), optional :: count_lens(:)       ! `count` in netcdf

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Local variables
    real(kind=8) ,allocatable :: val_re{{ get_rank_from_nd(nd) }}, val_im{{ get_rank_from_nd(nd) }}

    ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
    if (.not. enc_var_exist(fname, vname)) then
        if (enc_vea .eq. -1) then
            print *, 'Error in easyI with enc_vea = -1, variable does not exist: '//trim(vname)
            stop 1
        else
            return
        end if
    end if
    
    allocate(val_re{{ get_b_shape(nd) }})
    allocate(val_im{{ get_b_shape(nd) }})

    if (present(count_lens)) then
        call easyI_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re, position, count_lens)
        call easyI_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im, position, count_lens)
    else
        call easyI_real8_{{ nd }}d(fname, trim(vname)//'.real', val_re)
        call easyI_real8_{{ nd }}d(fname, trim(vname)//'.imag', val_im)
    end if

    val = cmplx(val_re, val_im, 8)
    deallocate(val_re)
    deallocate(val_im)
    return
end subroutine easyI_complex8_{{ nd }}d
!#jj2 endfor
