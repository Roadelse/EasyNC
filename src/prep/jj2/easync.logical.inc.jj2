
    Subroutine easyO_logical_scalar(fname, vname, val, shape_total, position)
        ! almost Duplicated with easyO_int
        implicit none
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
        logical,intent(in) :: val
        character(*),intent(in) :: fname, vname
        integer, intent(in), optional :: shape_total(:)      ! total shape
        integer, intent(in), optional :: position(:)         ! `start` in netcdf
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> local variables
        integer :: b, i

        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
        b = 0
        if(val) b = 1

        if (present(shape_total)) then
            call easyO_int4_scalar(fname, vname, b, shape_total, position)
        else
            call easyO_int4_scalar(fname, vname, b)
        end if

        return
    end subroutine easyO_logical_scalar

    Subroutine easyI_logical_scalar(fname, vname, val, position)
        ! almost Duplicated with easyO_int
        implicit none
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
        logical,intent(out) :: val
        character(*),intent(in) :: fname, vname
        integer, intent(in), optional :: position(:)         ! `start` in netcdf
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> local variables
        integer :: b, i

        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
        if (present(position)) then
            call easyI_int4_scalar(fname, vname, b, position)
        else
            call easyI_int4_scalar(fname, vname, b)
        end if

        val = .false.
        if(b .eq. 1) val = .true.

        return
    end subroutine easyI_logical_scalar


    !#jj2 for nd in [1,2,3,4,5,6,7]:
    Subroutine easyO_logical_{{ nd }}d(fname, vname, val, shape_total, position, count_lens)
        ! almost Duplicated with easyO_int
        implicit none
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
        logical,intent(in) :: val{{ get_rank_from_nd(nd) }}
        character(*),intent(in) :: fname, vname
        integer, intent(in), optional :: shape_total(:)      ! total shape
        integer, intent(in), optional :: position(:)         ! `start` in netcdf
        integer, intent(in), optional :: count_lens(:)       ! `count` in netcdf
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> local variables
        integer, allocatable :: b{{ get_rank_from_nd(nd) }}
        integer :: i

        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
        allocate(b{{ get_b_shape(nd) }})
        b = 0
        where(val) b = 1

        if (present(shape_total)) then
            call easyO_int4_{{ nd }}d(fname, vname, b, shape_total, position, count_lens)
        else
            call easyO_int4_{{ nd }}d(fname, vname, b)
        end if
        
        deallocate(b)

        return
    end subroutine easyO_logical_{{ nd }}d

    Subroutine easyI_logical_{{ nd }}d(fname, vname, val, position, count_lens)
        ! almost Duplicated with easyO_int
        implicit none
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Arguments
        logical,intent(out) :: val{{ get_rank_from_nd(nd) }}
        character(*),intent(in) :: fname, vname
        integer, intent(in), optional :: position(:)         ! `start` in netcdf
        integer, intent(in), optional :: count_lens(:)       ! `count` in netcdf
        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> local variables
        integer, allocatable :: b{{ get_rank_from_nd(nd) }}

        ! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> main body
        allocate(b{{ get_b_shape(nd) }})

        if (present(position)) then
            call easyI_int4_{{ nd }}d(fname, vname, b, position, count_lens)
        else
            call easyI_int4_{{ nd }}d(fname, vname, b)
        end if

        val = .false.
        where(b .eq. 1) val = .true.

        deallocate(b)

        return
    end subroutine easyI_logical_{{ nd }}d
    !#jj2 endfor

