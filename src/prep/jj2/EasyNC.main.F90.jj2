Module EasyNC

    use netcdf
    use rdee_fortran
    
    implicit none

    integer,allocatable :: enc_iaaT_1d(:), enc_iaaT2_1d(:), enc_iaaT_2d(:,:)
    integer :: enc_i, enc_j, enc_k
    character(80) :: varname_enc, strT_enc

    integer :: enc_vea = 0  ! var-exist-action, 0 - ignore it; 1 - just return; -1 : Abort
    logical :: enc_use_nc4 = .false.  ! determine if easyO* will write data to netcdf-4 format file

    !! Doesn't support allocatable/pointer scalar variable @2023-07-20

    interface easyO
    !#jj2 for type in ['int4', 'int8', 'real4', 'real8', 'string', 'logical', 'complex4', 'complex8']:
    !#jj2 for nd in [1,2,3,4,5,6,7]:
    !#jj2 if type == 'string' and nd == 7:
    !#jj2   continue
    !#jj2 endif
        module procedure easyO_{{ type }}_{{ nd }}d
    !#jj2 endfor
        module procedure easyO_{{ type }}_scalar
    !#jj2 endfor
    end interface


    interface easyI
    !#jj2 for type in ['int4', 'int8', 'real4', 'real8', 'string', 'logical', 'complex4', 'complex8']:
    !#jj2 for nd in [1,2,3,4,5,6,7]:
    !#jj2 if type == 'string' and nd == 7:
    !#jj2   continue
    !#jj2 endif
        module procedure easyI_{{ type }}_{{ nd }}d
    !#jj2 endfor
        module procedure easyI_{{ type }}_scalar
    !#jj2 endfor
    end interface


    interface easyOA
    !#jj2 for type in ['int4', 'int8', 'real4', 'real8', 'string', 'logical', 'complex4', 'complex8']:
    !#jj2 for nd in [1,2,3,4,5,6,7]:
    !#jj2 if type == 'string' and nd == 7:
    !#jj2   continue
    !#jj2 endif
        module procedure easyOA_{{ type }}_{{ nd }}d
    !#jj2 endfor
        ! module procedure easyOA_{{ type }}_scalar
    !#jj2 endfor
    end interface


    interface easyIA
    !#jj2 for type in ['int4', 'int8', 'real4', 'real8', 'string', 'logical', 'complex4', 'complex8']:
    !#jj2 for nd in [1,2,3,4,5,6,7]:
    !#jj2 if type == 'string' and nd == 7:
    !#jj2   continue
    !#jj2 endif
        module procedure easyIA_{{ type }}_{{ nd }}d
    !#jj2 endfor
        ! module procedure easyIA_{{ type }}_scalar
    !#jj2 endfor
    end interface


    interface easyOP
    !#jj2 for type in ['int4', 'int8', 'real4', 'real8', 'string', 'logical', 'complex4', 'complex8']:
    !#jj2 for nd in [1,2,3,4,5,6,7]:
    !#jj2 if type == 'string' and nd == 7:
    !#jj2   continue
    !#jj2 endif
        module procedure easyOP_{{ type }}_{{ nd }}d
    !#jj2 endfor
        ! module procedure easyOP_{{ type }}_scalar
    !#jj2 endfor
    end interface


    interface easyIP
    !#jj2 for type in ['int4', 'int8', 'real4', 'real8', 'string', 'logical', 'complex4', 'complex8']:
    !#jj2 for nd in [1,2,3,4,5,6,7]:
    !#jj2 if type == 'string' and nd == 7:
    !#jj2   continue
    !#jj2 endif
        module procedure easyIP_{{ type }}_{{ nd }}d
    !#jj2 endfor
        ! module procedure easyIP_{{ type }}_scalar
    !#jj2 endfor
    end interface

Contains

#include "easync.funcs.inc"
#include "easync.numeric.inc"
#include "easync.string.inc"
#include "easync.logical.inc"
#include "easync.complex.inc"
#include "easync.allocatable.inc"
#include "easync.pointer.inc"

    subroutine check_enc(status, errInfo)
        integer, intent ( in) :: status
        character(*), intent(in) :: errInfo
        
        if(status /= 0) then 
            print *, trim(nf90_strerror(status))
            print *, errInfo
            stop 1
        end if
    end subroutine
    
End Module
